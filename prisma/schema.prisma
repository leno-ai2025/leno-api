// Fichier : prisma/schema.prisma

// Configuration du client Prisma (ne pas modifier)
generator client {
  provider = "prisma-client-js"
}

// Configuration de la source de données (lit l'URL depuis le fichier .env)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Modèle pour vos clients (les artisans).
// Chaque "Tenant" représente un compte client dans votre SaaS.
model Tenant {
  id               String   @id @default(uuid())
  companyName      String

  // Le champ le plus important : il lie ce compte client à un utilisateur unique
  // dans le système d'authentification de Supabase.
  userId           String   @unique

  stripeCustomerId String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Chaque Tenant peut avoir plusieurs Agents (standardistes IA)
  agents           Agent[]
}

// Modèle pour les agents IA configurés par vos clients.
model Agent {
  id                  String   @id @default(uuid())
  name                String   @default("Assistant IA")
  systemPrompt        String?  @db.Text
  voiceId             String?  // Ex: ID de la voix ElevenLabs
  twilioPhoneNumber   String?  @unique
  elevenlabsAgentId   String?  @unique // ID de l'agent conversationnel
  calendlyLink        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation retour vers le Tenant : chaque Agent appartient à un seul Tenant.
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}